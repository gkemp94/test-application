AWSTemplateFormatVersion: 2010-09-09
Description: Creates Application

Parameters:
  NetworkStack:
    Type: String
    Default: code-recess-network-layer
  ImageURI:
    Type: String
    Default: 165316896606.dkr.ecr.us-east-1.amazonaws.com/test-application:0276cb1e54a08365c439d2ca746dfca5ad7b1ce8
  ContainerPort:
    Type: Number
    Default: 1337

Resources:
  # Create a TaskDefinition with container details
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties: 
      Memory: 1024
      Cpu: 512
      
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: 
        Fn::ImportValue: 
          !Sub '${NetworkStack}-executionrole'
      ExecutionRoleArn: 
        Fn::ImportValue:
          !Sub '${NetworkStack}-executionrole'
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-Container'
          Image: !Ref ImageURI
          Environment:
            - Name: DB_NAME
              Value: test-db
          Secrets:
            - Name: DB_CREDENTIALS
              ValueFrom: 
                Fn::ImportValue:
                  !Sub '${NetworkStack}-rds-secret'
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  
  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: 
        Fn::ImportValue: 
          !Sub '${NetworkStack}-vpc'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 15

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-logs'

  # Creates a security group for Containers and open in bound Container port from Load balancer security group to the Container 
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-ContainerSecurityGroup'
      VpcId:
        Fn::ImportValue: 
          !Sub '${NetworkStack}-vpc'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: 
            Fn::ImportValue: 
              !Sub '${NetworkStack}-lb-sg'

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-ECSServiceA'
      Cluster: 
        Fn::ImportValue: 
          !Sub '${NetworkStack}-cluster'
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: 
                !Sub '${NetworkStack}-publicsubneta'
            - Fn::ImportValue: 
                !Sub '${NetworkStack}-publicsubnetb'
          SecurityGroups:
            - !Ref ContainerSecurityGroup
            - Fn::ImportValue:
                !Sub '${NetworkStack}-rds-sg'
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-Container'
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # Adds Rule to HTTPS Load Balancer Listener
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:  
        Fn::ImportValue: 
          !Sub '${NetworkStack}-lb-listener'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Priority: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /test # Paramatize
              - /test/** # Paramatize
