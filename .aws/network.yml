AWSTemplateFormatVersion: 2010-09-09
Description: Creates VPC & Fargate Cluster

# AWS::StackName
Parameters:
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:165316896606:certificate/aff9732c-e3d3-4cc4-885e-c0759ffd42c0
  
Resources:
  # Creates VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.10.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
  
  # Creates Two Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.3.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref "AWS::Region", 'a']]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.10.4.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Join ['', [!Ref "AWS::Region", 'b']]

  # Create a Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  # Creates the Public Route for the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Attaches Public Subnets to Public Route Table
  PublicSubnetAPublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBPublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

    # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  # Attatch the Internet Gateway to the VPC
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'            
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'

  # Creates the Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-LoadBalancerSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Create a LoadBalancer and attach the Security group and Subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub '${AWS::StackName}-lb'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application

  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref CertificateArn
      DefaultActions: 
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Hello World
            StatusCode: 200
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            StatusCode: HTTP_301
            Port: 443
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  
  # Creates ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-cluster'

  # Creates DNS Record
  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: 'coderecess.com.'
      RecordSets:
        - Name: api.coderecess.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'LoadBalancer.DNSName'
  
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AWS::StackName}-subnet-group
      DBSubnetGroupDescription: Group of subnets for database
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

Outputs:
  Cluster: 
    Value: !Ref Cluster
    Export:  
      Name: !Sub ${AWS::StackName}-cluster
  ExecutionRole:
    Value: !Ref ExecutionRole
    Export:  
      Name: !Sub ${AWS::StackName}-executionrole
  VPC:
    Value: !Ref VPC
    Export:  
      Name: !Sub ${AWS::StackName}-vpc
  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Export:  
      Name: !Sub ${AWS::StackName}-publicsubneta
  PublicSubnetB:
    Value: !Ref PublicSubnetB
    Export:  
      Name: !Sub ${AWS::StackName}-publicsubnetb
  LoadBalancerListener:
    Value: !Ref LoadBalancerListener
    Export: 
      Name: !Sub ${AWS::StackName}-lb-listener
  LoadBalancerSecurityGroup:
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-lb-sg
  SubnetGroup:
    Value: !Ref SubnetGroup
    Export:
      Name: !Sub ${AWS::StackName}-subnet-group

  
  # RDSSecret:
  #  Value: !Ref RDSSecret
  #  Export:
  #    Name: !Sub ${AWS::StackName}-rds-secret
  # RDSSecurityGroup:
  #  Value: !Ref RDSSecurityGroup
  #  Export:
  #    Name: !Sub ${AWS::StackName}-rds-sg

  
