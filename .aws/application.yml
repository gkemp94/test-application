AWSTemplateFormatVersion: 2010-09-09
Description: Creates Application Layer with Dedicated Database & Application

Parameters:
  NetworkStack:
    Type: String
    Default: code-recess-network-layer
  ImageURI:
    Type: String
    Default: 165316896606.dkr.ecr.us-east-1.amazonaws.com/test-application:0276cb1e54a08365c439d2ca746dfca5ad7b1ce8
  ContainerPort:
    Type: Number
    Default: 1337

Resources:
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-RDSSecurityGroup'
      VpcId:
        Fn::ImportValue: 
          !Sub '${NetworkStack}-vpc'

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: 'postgres'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBInstanceIdentifier: !Sub ${AWS::StackName}-rds
      DBName: strapi
      DBSubnetGroupName:
        Fn::ImportValue: 
          !Sub '${NetworkStack}-subnet-group'
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is my rds instance secret'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "strapi"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn: RDSInstance
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSInstance
      TargetType: AWS::RDS::DBInstance

  # Create a TaskDefinition with container details
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties: 
      Memory: 2048
      Cpu: 1024
      
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: 
        Fn::ImportValue: 
          !Sub '${NetworkStack}-executionrole'
      ExecutionRoleArn: 
        Fn::ImportValue:
          !Sub '${NetworkStack}-executionrole'
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-Container'
          Image: !Ref ImageURI
          Environment:
            - Name: DB_NAME
              Value: test-db
          Secrets:
            - Name: DB_CREDENTIALS
              ValueFrom: !Ref RDSSecret
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  
  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: 
        Fn::ImportValue: 
          !Sub '${NetworkStack}-vpc'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 15

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-logs'

  # Creates a security group for Containers and open in bound Container port from Load balancer security group to the Container 
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-ContainerSecurityGroup'
      VpcId:
        Fn::ImportValue: 
          !Sub '${NetworkStack}-vpc'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: 
            Fn::ImportValue: 
              !Sub '${NetworkStack}-lb-sg'

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-ECSServiceA'
      Cluster: 
        Fn::ImportValue: 
          !Sub '${NetworkStack}-cluster'
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: 
                !Sub '${NetworkStack}-publicsubneta'
            - Fn::ImportValue: 
                !Sub '${NetworkStack}-publicsubnetb'
          SecurityGroups:
            - !Ref ContainerSecurityGroup
            - !Ref RDSSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-Container'
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # Adds Rule to HTTPS Load Balancer Listener
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:  
        Fn::ImportValue: 
          !Sub '${NetworkStack}-lb-listener'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Priority: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /test # Paramatize
              - /test/** # Paramatize

